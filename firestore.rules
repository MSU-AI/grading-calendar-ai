rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read and update their own profiles
      allow read, update: if isOwner(userId);
      // Only allow creation through Cloud Functions (triggered by Auth)
      allow create: if false;
      // Only allow deletion through Cloud Functions
      allow delete: if false;
      
      // Add rules for documents subcollection
      match /documents/{documentType} {
        allow read: if isOwner(userId);
        // Allow Cloud Functions to write to this collection
        allow write: if false;
      }
      
      // Add rules for formatted_data subcollection (new)
      match /formatted_data/{documentType} {
        allow read: if isOwner(userId);
        // Only allow Cloud Functions to write
        allow write: if false;
      }
      
      // Add rules for data subcollection (used for combined data)
      match /data/{dataId} {
        allow read: if isOwner(userId);
        // Only allow Cloud Functions to write
        allow write: if false;
      }
      
      // Add rules for predictions subcollection
      match /predictions/{predictionId} {
        allow read: if isOwner(userId);
        allow write: if false;
      }
    }
    
    // Courses collection - will be implemented later
    match /courses/{courseId} {
      // Users can read courses they're enrolled in
      allow read: if isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/courses/$(courseId));
      // Write operations will be handled by Cloud Functions
      allow write: if false;
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
